// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
// ignore_for_file: unused_element, unused_field, non_constant_identifier_names, prefer_final_locals, prefer_typing_uninitialized_variables, unnecessary_cast, unnecessary_lambdas, avoid_positional_boolean_parameters, avoid_redundant_argument_values, always_specify_types, prefer_generic_function_type_aliases
import 'dart:ffi' as ffi;

/// Bindings to LevelDB
class LibLevelDB {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  LibLevelDB(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  LibLevelDB.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void __va_start(
    ffi.Pointer<va_list> arg0,
  ) {
    return ___va_start(
      arg0,
    );
  }

  late final ___va_startPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<va_list>)>>(
          '__va_start');
  late final ___va_start =
      ___va_startPtr.asFunction<void Function(ffi.Pointer<va_list>)>();

  void __security_init_cookie() {
    return ___security_init_cookie();
  }

  late final ___security_init_cookiePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          '__security_init_cookie');
  late final ___security_init_cookie =
      ___security_init_cookiePtr.asFunction<void Function()>();

  void __security_check_cookie(
    int _StackCookie,
  ) {
    return ___security_check_cookie(
      _StackCookie,
    );
  }

  late final ___security_check_cookiePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UintPtr)>>(
          '__security_check_cookie');
  late final ___security_check_cookie =
      ___security_check_cookiePtr.asFunction<void Function(int)>();

  void __report_gsfailure(
    int _StackCookie,
  ) {
    return ___report_gsfailure(
      _StackCookie,
    );
  }

  late final ___report_gsfailurePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UintPtr)>>(
          '__report_gsfailure');
  late final ___report_gsfailure =
      ___report_gsfailurePtr.asFunction<void Function(int)>();

  late final ffi.Pointer<ffi.UintPtr> ___security_cookie =
      _lookup<ffi.UintPtr>('__security_cookie');

  int get __security_cookie => ___security_cookie.value;

  set __security_cookie(int value) => ___security_cookie.value = value;

  void _invalid_parameter_noinfo() {
    return __invalid_parameter_noinfo();
  }

  late final __invalid_parameter_noinfoPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          '_invalid_parameter_noinfo');
  late final __invalid_parameter_noinfo =
      __invalid_parameter_noinfoPtr.asFunction<void Function()>();

  void _invalid_parameter_noinfo_noreturn() {
    return __invalid_parameter_noinfo_noreturn();
  }

  late final __invalid_parameter_noinfo_noreturnPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          '_invalid_parameter_noinfo_noreturn');
  late final __invalid_parameter_noinfo_noreturn =
      __invalid_parameter_noinfo_noreturnPtr.asFunction<void Function()>();

  void _invoke_watson(
    ffi.Pointer<ffi.WChar> _Expression,
    ffi.Pointer<ffi.WChar> _FunctionName,
    ffi.Pointer<ffi.WChar> _FileName,
    int _LineNo,
    int _Reserved,
  ) {
    return __invoke_watson(
      _Expression,
      _FunctionName,
      _FileName,
      _LineNo,
      _Reserved,
    );
  }

  late final __invoke_watsonPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.WChar>,
              ffi.Pointer<ffi.WChar>,
              ffi.Pointer<ffi.WChar>,
              ffi.UnsignedInt,
              ffi.UintPtr)>>('_invoke_watson');
  late final __invoke_watson = __invoke_watsonPtr.asFunction<
      void Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.WChar>,
          ffi.Pointer<ffi.WChar>, int, int)>();

  ffi.Pointer<ffi.Int> _errno() {
    return __errno();
  }

  late final __errnoPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int> Function()>>('_errno');
  late final __errno = __errnoPtr.asFunction<ffi.Pointer<ffi.Int> Function()>();

  int _set_errno(
    int _Value,
  ) {
    return __set_errno(
      _Value,
    );
  }

  late final __set_errnoPtr =
      _lookup<ffi.NativeFunction<errno_t Function(ffi.Int)>>('_set_errno');
  late final __set_errno = __set_errnoPtr.asFunction<int Function(int)>();

  int _get_errno(
    ffi.Pointer<ffi.Int> _Value,
  ) {
    return __get_errno(
      _Value,
    );
  }

  late final __get_errnoPtr =
      _lookup<ffi.NativeFunction<errno_t Function(ffi.Pointer<ffi.Int>)>>(
          '_get_errno');
  late final __get_errno =
      __get_errnoPtr.asFunction<int Function(ffi.Pointer<ffi.Int>)>();

  int __threadid() {
    return ___threadid();
  }

  late final ___threadidPtr =
      _lookup<ffi.NativeFunction<ffi.UnsignedLong Function()>>('__threadid');
  late final ___threadid = ___threadidPtr.asFunction<int Function()>();

  int __threadhandle() {
    return ___threadhandle();
  }

  late final ___threadhandlePtr =
      _lookup<ffi.NativeFunction<ffi.UintPtr Function()>>('__threadhandle');
  late final ___threadhandle = ___threadhandlePtr.asFunction<int Function()>();

  ffi.Pointer<leveldb_t> leveldb_open(
    ffi.Pointer<leveldb_options_t> options,
    ffi.Pointer<ffi.Char> name,
    ffi.Pointer<ffi.Pointer<ffi.Char>> errptr,
  ) {
    return _leveldb_open(
      options,
      name,
      errptr,
    );
  }

  late final _leveldb_openPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<leveldb_t> Function(
              ffi.Pointer<leveldb_options_t>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('leveldb_open');
  late final _leveldb_open = _leveldb_openPtr.asFunction<
      ffi.Pointer<leveldb_t> Function(ffi.Pointer<leveldb_options_t>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  void leveldb_close(
    ffi.Pointer<leveldb_t> db,
  ) {
    return _leveldb_close(
      db,
    );
  }

  late final _leveldb_closePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<leveldb_t>)>>(
          'leveldb_close');
  late final _leveldb_close =
      _leveldb_closePtr.asFunction<void Function(ffi.Pointer<leveldb_t>)>();

  void leveldb_put(
    ffi.Pointer<leveldb_t> db,
    ffi.Pointer<leveldb_writeoptions_t> options,
    ffi.Pointer<ffi.Char> key,
    int keylen,
    ffi.Pointer<ffi.Char> val,
    int vallen,
    ffi.Pointer<ffi.Pointer<ffi.Char>> errptr,
  ) {
    return _leveldb_put(
      db,
      options,
      key,
      keylen,
      val,
      vallen,
      errptr,
    );
  }

  late final _leveldb_putPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<leveldb_t>,
              ffi.Pointer<leveldb_writeoptions_t>,
              ffi.Pointer<ffi.Char>,
              ffi.Size,
              ffi.Pointer<ffi.Char>,
              ffi.Size,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('leveldb_put');
  late final _leveldb_put = _leveldb_putPtr.asFunction<
      void Function(
          ffi.Pointer<leveldb_t>,
          ffi.Pointer<leveldb_writeoptions_t>,
          ffi.Pointer<ffi.Char>,
          int,
          ffi.Pointer<ffi.Char>,
          int,
          ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  void leveldb_delete(
    ffi.Pointer<leveldb_t> db,
    ffi.Pointer<leveldb_writeoptions_t> options,
    ffi.Pointer<ffi.Char> key,
    int keylen,
    ffi.Pointer<ffi.Pointer<ffi.Char>> errptr,
  ) {
    return _leveldb_delete(
      db,
      options,
      key,
      keylen,
      errptr,
    );
  }

  late final _leveldb_deletePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<leveldb_t>,
              ffi.Pointer<leveldb_writeoptions_t>,
              ffi.Pointer<ffi.Char>,
              ffi.Size,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('leveldb_delete');
  late final _leveldb_delete = _leveldb_deletePtr.asFunction<
      void Function(ffi.Pointer<leveldb_t>, ffi.Pointer<leveldb_writeoptions_t>,
          ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  void leveldb_write(
    ffi.Pointer<leveldb_t> db,
    ffi.Pointer<leveldb_writeoptions_t> options,
    ffi.Pointer<leveldb_writebatch_t> batch,
    ffi.Pointer<ffi.Pointer<ffi.Char>> errptr,
  ) {
    return _leveldb_write(
      db,
      options,
      batch,
      errptr,
    );
  }

  late final _leveldb_writePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<leveldb_t>,
              ffi.Pointer<leveldb_writeoptions_t>,
              ffi.Pointer<leveldb_writebatch_t>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('leveldb_write');
  late final _leveldb_write = _leveldb_writePtr.asFunction<
      void Function(
          ffi.Pointer<leveldb_t>,
          ffi.Pointer<leveldb_writeoptions_t>,
          ffi.Pointer<leveldb_writebatch_t>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  ffi.Pointer<ffi.Char> leveldb_get(
    ffi.Pointer<leveldb_t> db,
    ffi.Pointer<leveldb_readoptions_t> options,
    ffi.Pointer<ffi.Char> key,
    int keylen,
    ffi.Pointer<ffi.Size> vallen,
    ffi.Pointer<ffi.Pointer<ffi.Char>> errptr,
  ) {
    return _leveldb_get(
      db,
      options,
      key,
      keylen,
      vallen,
      errptr,
    );
  }

  late final _leveldb_getPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<leveldb_t>,
              ffi.Pointer<leveldb_readoptions_t>,
              ffi.Pointer<ffi.Char>,
              ffi.Size,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('leveldb_get');
  late final _leveldb_get = _leveldb_getPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<leveldb_t>,
          ffi.Pointer<leveldb_readoptions_t>,
          ffi.Pointer<ffi.Char>,
          int,
          ffi.Pointer<ffi.Size>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  ffi.Pointer<leveldb_iterator_t> leveldb_create_iterator(
    ffi.Pointer<leveldb_t> db,
    ffi.Pointer<leveldb_readoptions_t> options,
  ) {
    return _leveldb_create_iterator(
      db,
      options,
    );
  }

  late final _leveldb_create_iteratorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<leveldb_iterator_t> Function(ffi.Pointer<leveldb_t>,
              ffi.Pointer<leveldb_readoptions_t>)>>('leveldb_create_iterator');
  late final _leveldb_create_iterator = _leveldb_create_iteratorPtr.asFunction<
      ffi.Pointer<leveldb_iterator_t> Function(
          ffi.Pointer<leveldb_t>, ffi.Pointer<leveldb_readoptions_t>)>();

  ffi.Pointer<leveldb_snapshot_t> leveldb_create_snapshot(
    ffi.Pointer<leveldb_t> db,
  ) {
    return _leveldb_create_snapshot(
      db,
    );
  }

  late final _leveldb_create_snapshotPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<leveldb_snapshot_t> Function(
              ffi.Pointer<leveldb_t>)>>('leveldb_create_snapshot');
  late final _leveldb_create_snapshot = _leveldb_create_snapshotPtr.asFunction<
      ffi.Pointer<leveldb_snapshot_t> Function(ffi.Pointer<leveldb_t>)>();

  void leveldb_release_snapshot(
    ffi.Pointer<leveldb_t> db,
    ffi.Pointer<leveldb_snapshot_t> snapshot,
  ) {
    return _leveldb_release_snapshot(
      db,
      snapshot,
    );
  }

  late final _leveldb_release_snapshotPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<leveldb_t>,
              ffi.Pointer<leveldb_snapshot_t>)>>('leveldb_release_snapshot');
  late final _leveldb_release_snapshot =
      _leveldb_release_snapshotPtr.asFunction<
          void Function(
              ffi.Pointer<leveldb_t>, ffi.Pointer<leveldb_snapshot_t>)>();

  ffi.Pointer<ffi.Char> leveldb_property_value(
    ffi.Pointer<leveldb_t> db,
    ffi.Pointer<ffi.Char> propname,
  ) {
    return _leveldb_property_value(
      db,
      propname,
    );
  }

  late final _leveldb_property_valuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<leveldb_t>,
              ffi.Pointer<ffi.Char>)>>('leveldb_property_value');
  late final _leveldb_property_value = _leveldb_property_valuePtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<leveldb_t>, ffi.Pointer<ffi.Char>)>();

  void leveldb_approximate_sizes(
    ffi.Pointer<leveldb_t> db,
    int num_ranges,
    ffi.Pointer<ffi.Pointer<ffi.Char>> range_start_key,
    ffi.Pointer<ffi.Size> range_start_key_len,
    ffi.Pointer<ffi.Pointer<ffi.Char>> range_limit_key,
    ffi.Pointer<ffi.Size> range_limit_key_len,
    ffi.Pointer<ffi.Uint64> sizes,
  ) {
    return _leveldb_approximate_sizes(
      db,
      num_ranges,
      range_start_key,
      range_start_key_len,
      range_limit_key,
      range_limit_key_len,
      sizes,
    );
  }

  late final _leveldb_approximate_sizesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<leveldb_t>,
              ffi.Int,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Uint64>)>>('leveldb_approximate_sizes');
  late final _leveldb_approximate_sizes =
      _leveldb_approximate_sizesPtr.asFunction<
          void Function(
              ffi.Pointer<leveldb_t>,
              int,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Uint64>)>();

  void leveldb_compact_range(
    ffi.Pointer<leveldb_t> db,
    ffi.Pointer<ffi.Char> start_key,
    int start_key_len,
    ffi.Pointer<ffi.Char> limit_key,
    int limit_key_len,
  ) {
    return _leveldb_compact_range(
      db,
      start_key,
      start_key_len,
      limit_key,
      limit_key_len,
    );
  }

  late final _leveldb_compact_rangePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<leveldb_t>,
              ffi.Pointer<ffi.Char>,
              ffi.Size,
              ffi.Pointer<ffi.Char>,
              ffi.Size)>>('leveldb_compact_range');
  late final _leveldb_compact_range = _leveldb_compact_rangePtr.asFunction<
      void Function(ffi.Pointer<leveldb_t>, ffi.Pointer<ffi.Char>, int,
          ffi.Pointer<ffi.Char>, int)>();

  void leveldb_destroy_db(
    ffi.Pointer<leveldb_options_t> options,
    ffi.Pointer<ffi.Char> name,
    ffi.Pointer<ffi.Pointer<ffi.Char>> errptr,
  ) {
    return _leveldb_destroy_db(
      options,
      name,
      errptr,
    );
  }

  late final _leveldb_destroy_dbPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<leveldb_options_t>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('leveldb_destroy_db');
  late final _leveldb_destroy_db = _leveldb_destroy_dbPtr.asFunction<
      void Function(ffi.Pointer<leveldb_options_t>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  void leveldb_repair_db(
    ffi.Pointer<leveldb_options_t> options,
    ffi.Pointer<ffi.Char> name,
    ffi.Pointer<ffi.Pointer<ffi.Char>> errptr,
  ) {
    return _leveldb_repair_db(
      options,
      name,
      errptr,
    );
  }

  late final _leveldb_repair_dbPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<leveldb_options_t>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('leveldb_repair_db');
  late final _leveldb_repair_db = _leveldb_repair_dbPtr.asFunction<
      void Function(ffi.Pointer<leveldb_options_t>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  void leveldb_iter_destroy(
    ffi.Pointer<leveldb_iterator_t> arg0,
  ) {
    return _leveldb_iter_destroy(
      arg0,
    );
  }

  late final _leveldb_iter_destroyPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<leveldb_iterator_t>)>>(
      'leveldb_iter_destroy');
  late final _leveldb_iter_destroy = _leveldb_iter_destroyPtr
      .asFunction<void Function(ffi.Pointer<leveldb_iterator_t>)>();

  int leveldb_iter_valid(
    ffi.Pointer<leveldb_iterator_t> arg0,
  ) {
    return _leveldb_iter_valid(
      arg0,
    );
  }

  late final _leveldb_iter_validPtr = _lookup<
          ffi
          .NativeFunction<ffi.Uint8 Function(ffi.Pointer<leveldb_iterator_t>)>>(
      'leveldb_iter_valid');
  late final _leveldb_iter_valid = _leveldb_iter_validPtr
      .asFunction<int Function(ffi.Pointer<leveldb_iterator_t>)>();

  void leveldb_iter_seek_to_first(
    ffi.Pointer<leveldb_iterator_t> arg0,
  ) {
    return _leveldb_iter_seek_to_first(
      arg0,
    );
  }

  late final _leveldb_iter_seek_to_firstPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<leveldb_iterator_t>)>>(
      'leveldb_iter_seek_to_first');
  late final _leveldb_iter_seek_to_first = _leveldb_iter_seek_to_firstPtr
      .asFunction<void Function(ffi.Pointer<leveldb_iterator_t>)>();

  void leveldb_iter_seek_to_last(
    ffi.Pointer<leveldb_iterator_t> arg0,
  ) {
    return _leveldb_iter_seek_to_last(
      arg0,
    );
  }

  late final _leveldb_iter_seek_to_lastPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<leveldb_iterator_t>)>>(
      'leveldb_iter_seek_to_last');
  late final _leveldb_iter_seek_to_last = _leveldb_iter_seek_to_lastPtr
      .asFunction<void Function(ffi.Pointer<leveldb_iterator_t>)>();

  void leveldb_iter_seek(
    ffi.Pointer<leveldb_iterator_t> arg0,
    ffi.Pointer<ffi.Char> k,
    int klen,
  ) {
    return _leveldb_iter_seek(
      arg0,
      k,
      klen,
    );
  }

  late final _leveldb_iter_seekPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<leveldb_iterator_t>,
              ffi.Pointer<ffi.Char>, ffi.Size)>>('leveldb_iter_seek');
  late final _leveldb_iter_seek = _leveldb_iter_seekPtr.asFunction<
      void Function(
          ffi.Pointer<leveldb_iterator_t>, ffi.Pointer<ffi.Char>, int)>();

  void leveldb_iter_next(
    ffi.Pointer<leveldb_iterator_t> arg0,
  ) {
    return _leveldb_iter_next(
      arg0,
    );
  }

  late final _leveldb_iter_nextPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<leveldb_iterator_t>)>>(
      'leveldb_iter_next');
  late final _leveldb_iter_next = _leveldb_iter_nextPtr
      .asFunction<void Function(ffi.Pointer<leveldb_iterator_t>)>();

  void leveldb_iter_prev(
    ffi.Pointer<leveldb_iterator_t> arg0,
  ) {
    return _leveldb_iter_prev(
      arg0,
    );
  }

  late final _leveldb_iter_prevPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<leveldb_iterator_t>)>>(
      'leveldb_iter_prev');
  late final _leveldb_iter_prev = _leveldb_iter_prevPtr
      .asFunction<void Function(ffi.Pointer<leveldb_iterator_t>)>();

  ffi.Pointer<ffi.Char> leveldb_iter_key(
    ffi.Pointer<leveldb_iterator_t> arg0,
    ffi.Pointer<ffi.Size> klen,
  ) {
    return _leveldb_iter_key(
      arg0,
      klen,
    );
  }

  late final _leveldb_iter_keyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<leveldb_iterator_t>,
              ffi.Pointer<ffi.Size>)>>('leveldb_iter_key');
  late final _leveldb_iter_key = _leveldb_iter_keyPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<leveldb_iterator_t>, ffi.Pointer<ffi.Size>)>();

  ffi.Pointer<ffi.Char> leveldb_iter_value(
    ffi.Pointer<leveldb_iterator_t> arg0,
    ffi.Pointer<ffi.Size> vlen,
  ) {
    return _leveldb_iter_value(
      arg0,
      vlen,
    );
  }

  late final _leveldb_iter_valuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<leveldb_iterator_t>,
              ffi.Pointer<ffi.Size>)>>('leveldb_iter_value');
  late final _leveldb_iter_value = _leveldb_iter_valuePtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<leveldb_iterator_t>, ffi.Pointer<ffi.Size>)>();

  void leveldb_iter_get_error(
    ffi.Pointer<leveldb_iterator_t> arg0,
    ffi.Pointer<ffi.Pointer<ffi.Char>> errptr,
  ) {
    return _leveldb_iter_get_error(
      arg0,
      errptr,
    );
  }

  late final _leveldb_iter_get_errorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<leveldb_iterator_t>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('leveldb_iter_get_error');
  late final _leveldb_iter_get_error = _leveldb_iter_get_errorPtr.asFunction<
      void Function(ffi.Pointer<leveldb_iterator_t>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  ffi.Pointer<leveldb_writebatch_t> leveldb_writebatch_create() {
    return _leveldb_writebatch_create();
  }

  late final _leveldb_writebatch_createPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<leveldb_writebatch_t> Function()>>(
          'leveldb_writebatch_create');
  late final _leveldb_writebatch_create = _leveldb_writebatch_createPtr
      .asFunction<ffi.Pointer<leveldb_writebatch_t> Function()>();

  void leveldb_writebatch_destroy(
    ffi.Pointer<leveldb_writebatch_t> arg0,
  ) {
    return _leveldb_writebatch_destroy(
      arg0,
    );
  }

  late final _leveldb_writebatch_destroyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<leveldb_writebatch_t>)>>(
      'leveldb_writebatch_destroy');
  late final _leveldb_writebatch_destroy = _leveldb_writebatch_destroyPtr
      .asFunction<void Function(ffi.Pointer<leveldb_writebatch_t>)>();

  void leveldb_writebatch_clear(
    ffi.Pointer<leveldb_writebatch_t> arg0,
  ) {
    return _leveldb_writebatch_clear(
      arg0,
    );
  }

  late final _leveldb_writebatch_clearPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<leveldb_writebatch_t>)>>('leveldb_writebatch_clear');
  late final _leveldb_writebatch_clear = _leveldb_writebatch_clearPtr
      .asFunction<void Function(ffi.Pointer<leveldb_writebatch_t>)>();

  void leveldb_writebatch_put(
    ffi.Pointer<leveldb_writebatch_t> arg0,
    ffi.Pointer<ffi.Char> key,
    int klen,
    ffi.Pointer<ffi.Char> val,
    int vlen,
  ) {
    return _leveldb_writebatch_put(
      arg0,
      key,
      klen,
      val,
      vlen,
    );
  }

  late final _leveldb_writebatch_putPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<leveldb_writebatch_t>,
              ffi.Pointer<ffi.Char>,
              ffi.Size,
              ffi.Pointer<ffi.Char>,
              ffi.Size)>>('leveldb_writebatch_put');
  late final _leveldb_writebatch_put = _leveldb_writebatch_putPtr.asFunction<
      void Function(ffi.Pointer<leveldb_writebatch_t>, ffi.Pointer<ffi.Char>,
          int, ffi.Pointer<ffi.Char>, int)>();

  void leveldb_writebatch_delete(
    ffi.Pointer<leveldb_writebatch_t> arg0,
    ffi.Pointer<ffi.Char> key,
    int klen,
  ) {
    return _leveldb_writebatch_delete(
      arg0,
      key,
      klen,
    );
  }

  late final _leveldb_writebatch_deletePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<leveldb_writebatch_t>,
              ffi.Pointer<ffi.Char>, ffi.Size)>>('leveldb_writebatch_delete');
  late final _leveldb_writebatch_delete =
      _leveldb_writebatch_deletePtr.asFunction<
          void Function(
              ffi.Pointer<leveldb_writebatch_t>, ffi.Pointer<ffi.Char>, int)>();

  void leveldb_writebatch_iterate(
    ffi.Pointer<leveldb_writebatch_t> arg0,
    ffi.Pointer<ffi.Void> state,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>,
                    ffi.Size, ffi.Pointer<ffi.Char>, ffi.Size)>>
        put,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Void Function(
                    ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>, ffi.Size)>>
        deleted,
  ) {
    return _leveldb_writebatch_iterate(
      arg0,
      state,
      put,
      deleted,
    );
  }

  late final _leveldb_writebatch_iteratePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<leveldb_writebatch_t>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(
                          ffi.Pointer<ffi.Void>,
                          ffi.Pointer<ffi.Char>,
                          ffi.Size,
                          ffi.Pointer<ffi.Char>,
                          ffi.Size)>>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(
                          ffi.Pointer<ffi.Void>,
                          ffi.Pointer<ffi.Char>,
                          ffi.Size)>>)>>('leveldb_writebatch_iterate');
  late final _leveldb_writebatch_iterate =
      _leveldb_writebatch_iteratePtr.asFunction<
          void Function(
              ffi.Pointer<leveldb_writebatch_t>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(
                          ffi.Pointer<ffi.Void>,
                          ffi.Pointer<ffi.Char>,
                          ffi.Size,
                          ffi.Pointer<ffi.Char>,
                          ffi.Size)>>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(ffi.Pointer<ffi.Void>,
                          ffi.Pointer<ffi.Char>, ffi.Size)>>)>();

  void leveldb_writebatch_append(
    ffi.Pointer<leveldb_writebatch_t> destination,
    ffi.Pointer<leveldb_writebatch_t> source,
  ) {
    return _leveldb_writebatch_append(
      destination,
      source,
    );
  }

  late final _leveldb_writebatch_appendPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<leveldb_writebatch_t>,
              ffi.Pointer<leveldb_writebatch_t>)>>('leveldb_writebatch_append');
  late final _leveldb_writebatch_append =
      _leveldb_writebatch_appendPtr.asFunction<
          void Function(ffi.Pointer<leveldb_writebatch_t>,
              ffi.Pointer<leveldb_writebatch_t>)>();

  ffi.Pointer<leveldb_options_t> leveldb_options_create() {
    return _leveldb_options_create();
  }

  late final _leveldb_options_createPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<leveldb_options_t> Function()>>(
          'leveldb_options_create');
  late final _leveldb_options_create = _leveldb_options_createPtr
      .asFunction<ffi.Pointer<leveldb_options_t> Function()>();

  void leveldb_options_destroy(
    ffi.Pointer<leveldb_options_t> arg0,
  ) {
    return _leveldb_options_destroy(
      arg0,
    );
  }

  late final _leveldb_options_destroyPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<leveldb_options_t>)>>(
      'leveldb_options_destroy');
  late final _leveldb_options_destroy = _leveldb_options_destroyPtr
      .asFunction<void Function(ffi.Pointer<leveldb_options_t>)>();

  void leveldb_options_set_comparator(
    ffi.Pointer<leveldb_options_t> arg0,
    ffi.Pointer<leveldb_comparator_t> arg1,
  ) {
    return _leveldb_options_set_comparator(
      arg0,
      arg1,
    );
  }

  late final _leveldb_options_set_comparatorPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<leveldb_options_t>,
                  ffi.Pointer<leveldb_comparator_t>)>>(
      'leveldb_options_set_comparator');
  late final _leveldb_options_set_comparator =
      _leveldb_options_set_comparatorPtr.asFunction<
          void Function(ffi.Pointer<leveldb_options_t>,
              ffi.Pointer<leveldb_comparator_t>)>();

  void leveldb_options_set_filter_policy(
    ffi.Pointer<leveldb_options_t> arg0,
    ffi.Pointer<leveldb_filterpolicy_t> arg1,
  ) {
    return _leveldb_options_set_filter_policy(
      arg0,
      arg1,
    );
  }

  late final _leveldb_options_set_filter_policyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<leveldb_options_t>,
                  ffi.Pointer<leveldb_filterpolicy_t>)>>(
      'leveldb_options_set_filter_policy');
  late final _leveldb_options_set_filter_policy =
      _leveldb_options_set_filter_policyPtr.asFunction<
          void Function(ffi.Pointer<leveldb_options_t>,
              ffi.Pointer<leveldb_filterpolicy_t>)>();

  void leveldb_options_set_create_if_missing(
    ffi.Pointer<leveldb_options_t> arg0,
    int arg1,
  ) {
    return _leveldb_options_set_create_if_missing(
      arg0,
      arg1,
    );
  }

  late final _leveldb_options_set_create_if_missingPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<leveldb_options_t>,
              ffi.Uint8)>>('leveldb_options_set_create_if_missing');
  late final _leveldb_options_set_create_if_missing =
      _leveldb_options_set_create_if_missingPtr
          .asFunction<void Function(ffi.Pointer<leveldb_options_t>, int)>();

  void leveldb_options_set_error_if_exists(
    ffi.Pointer<leveldb_options_t> arg0,
    int arg1,
  ) {
    return _leveldb_options_set_error_if_exists(
      arg0,
      arg1,
    );
  }

  late final _leveldb_options_set_error_if_existsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<leveldb_options_t>,
              ffi.Uint8)>>('leveldb_options_set_error_if_exists');
  late final _leveldb_options_set_error_if_exists =
      _leveldb_options_set_error_if_existsPtr
          .asFunction<void Function(ffi.Pointer<leveldb_options_t>, int)>();

  void leveldb_options_set_paranoid_checks(
    ffi.Pointer<leveldb_options_t> arg0,
    int arg1,
  ) {
    return _leveldb_options_set_paranoid_checks(
      arg0,
      arg1,
    );
  }

  late final _leveldb_options_set_paranoid_checksPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<leveldb_options_t>,
              ffi.Uint8)>>('leveldb_options_set_paranoid_checks');
  late final _leveldb_options_set_paranoid_checks =
      _leveldb_options_set_paranoid_checksPtr
          .asFunction<void Function(ffi.Pointer<leveldb_options_t>, int)>();

  void leveldb_options_set_env(
    ffi.Pointer<leveldb_options_t> arg0,
    ffi.Pointer<leveldb_env_t> arg1,
  ) {
    return _leveldb_options_set_env(
      arg0,
      arg1,
    );
  }

  late final _leveldb_options_set_envPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<leveldb_options_t>,
              ffi.Pointer<leveldb_env_t>)>>('leveldb_options_set_env');
  late final _leveldb_options_set_env = _leveldb_options_set_envPtr.asFunction<
      void Function(
          ffi.Pointer<leveldb_options_t>, ffi.Pointer<leveldb_env_t>)>();

  void leveldb_options_set_info_log(
    ffi.Pointer<leveldb_options_t> arg0,
    ffi.Pointer<leveldb_logger_t> arg1,
  ) {
    return _leveldb_options_set_info_log(
      arg0,
      arg1,
    );
  }

  late final _leveldb_options_set_info_logPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<leveldb_options_t>,
              ffi.Pointer<leveldb_logger_t>)>>('leveldb_options_set_info_log');
  late final _leveldb_options_set_info_log =
      _leveldb_options_set_info_logPtr.asFunction<
          void Function(
              ffi.Pointer<leveldb_options_t>, ffi.Pointer<leveldb_logger_t>)>();

  void leveldb_options_set_write_buffer_size(
    ffi.Pointer<leveldb_options_t> arg0,
    int arg1,
  ) {
    return _leveldb_options_set_write_buffer_size(
      arg0,
      arg1,
    );
  }

  late final _leveldb_options_set_write_buffer_sizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<leveldb_options_t>,
              ffi.Size)>>('leveldb_options_set_write_buffer_size');
  late final _leveldb_options_set_write_buffer_size =
      _leveldb_options_set_write_buffer_sizePtr
          .asFunction<void Function(ffi.Pointer<leveldb_options_t>, int)>();

  void leveldb_options_set_max_open_files(
    ffi.Pointer<leveldb_options_t> arg0,
    int arg1,
  ) {
    return _leveldb_options_set_max_open_files(
      arg0,
      arg1,
    );
  }

  late final _leveldb_options_set_max_open_filesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<leveldb_options_t>,
              ffi.Int)>>('leveldb_options_set_max_open_files');
  late final _leveldb_options_set_max_open_files =
      _leveldb_options_set_max_open_filesPtr
          .asFunction<void Function(ffi.Pointer<leveldb_options_t>, int)>();

  void leveldb_options_set_cache(
    ffi.Pointer<leveldb_options_t> arg0,
    ffi.Pointer<leveldb_cache_t> arg1,
  ) {
    return _leveldb_options_set_cache(
      arg0,
      arg1,
    );
  }

  late final _leveldb_options_set_cachePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<leveldb_options_t>,
              ffi.Pointer<leveldb_cache_t>)>>('leveldb_options_set_cache');
  late final _leveldb_options_set_cache =
      _leveldb_options_set_cachePtr.asFunction<
          void Function(
              ffi.Pointer<leveldb_options_t>, ffi.Pointer<leveldb_cache_t>)>();

  void leveldb_options_set_block_size(
    ffi.Pointer<leveldb_options_t> arg0,
    int arg1,
  ) {
    return _leveldb_options_set_block_size(
      arg0,
      arg1,
    );
  }

  late final _leveldb_options_set_block_sizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<leveldb_options_t>,
              ffi.Size)>>('leveldb_options_set_block_size');
  late final _leveldb_options_set_block_size =
      _leveldb_options_set_block_sizePtr
          .asFunction<void Function(ffi.Pointer<leveldb_options_t>, int)>();

  void leveldb_options_set_block_restart_interval(
    ffi.Pointer<leveldb_options_t> arg0,
    int arg1,
  ) {
    return _leveldb_options_set_block_restart_interval(
      arg0,
      arg1,
    );
  }

  late final _leveldb_options_set_block_restart_intervalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<leveldb_options_t>,
              ffi.Int)>>('leveldb_options_set_block_restart_interval');
  late final _leveldb_options_set_block_restart_interval =
      _leveldb_options_set_block_restart_intervalPtr
          .asFunction<void Function(ffi.Pointer<leveldb_options_t>, int)>();

  void leveldb_options_set_max_file_size(
    ffi.Pointer<leveldb_options_t> arg0,
    int arg1,
  ) {
    return _leveldb_options_set_max_file_size(
      arg0,
      arg1,
    );
  }

  late final _leveldb_options_set_max_file_sizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<leveldb_options_t>,
              ffi.Size)>>('leveldb_options_set_max_file_size');
  late final _leveldb_options_set_max_file_size =
      _leveldb_options_set_max_file_sizePtr
          .asFunction<void Function(ffi.Pointer<leveldb_options_t>, int)>();

  void leveldb_options_set_compression(
    ffi.Pointer<leveldb_options_t> arg0,
    int arg1,
  ) {
    return _leveldb_options_set_compression(
      arg0,
      arg1,
    );
  }

  late final _leveldb_options_set_compressionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<leveldb_options_t>,
              ffi.Int)>>('leveldb_options_set_compression');
  late final _leveldb_options_set_compression =
      _leveldb_options_set_compressionPtr
          .asFunction<void Function(ffi.Pointer<leveldb_options_t>, int)>();

  ffi.Pointer<leveldb_comparator_t> leveldb_comparator_create(
    ffi.Pointer<ffi.Void> state,
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
        destructor,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>,
                    ffi.Size, ffi.Pointer<ffi.Char>, ffi.Size)>>
        compare,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Void>)>>
        name,
  ) {
    return _leveldb_comparator_create(
      state,
      destructor,
      compare,
      name,
    );
  }

  late final _leveldb_comparator_createPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<leveldb_comparator_t> Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<
                  ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Pointer<ffi.Void>,
                          ffi.Pointer<ffi.Char>,
                          ffi.Size,
                          ffi.Pointer<ffi.Char>,
                          ffi.Size)>>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Pointer<ffi.Char> Function(
                          ffi.Pointer<
                              ffi.Void>)>>)>>('leveldb_comparator_create');
  late final _leveldb_comparator_create =
      _leveldb_comparator_createPtr.asFunction<
          ffi.Pointer<leveldb_comparator_t> Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<
                  ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Pointer<ffi.Void>,
                          ffi.Pointer<ffi.Char>,
                          ffi.Size,
                          ffi.Pointer<ffi.Char>,
                          ffi.Size)>>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Pointer<ffi.Char> Function(
                          ffi.Pointer<ffi.Void>)>>)>();

  void leveldb_comparator_destroy(
    ffi.Pointer<leveldb_comparator_t> arg0,
  ) {
    return _leveldb_comparator_destroy(
      arg0,
    );
  }

  late final _leveldb_comparator_destroyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<leveldb_comparator_t>)>>(
      'leveldb_comparator_destroy');
  late final _leveldb_comparator_destroy = _leveldb_comparator_destroyPtr
      .asFunction<void Function(ffi.Pointer<leveldb_comparator_t>)>();

  ffi.Pointer<leveldb_filterpolicy_t> leveldb_filterpolicy_create(
    ffi.Pointer<ffi.Void> state,
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
        destructor,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Pointer<ffi.Char> Function(
                    ffi.Pointer<ffi.Void>,
                    ffi.Pointer<ffi.Pointer<ffi.Char>>,
                    ffi.Pointer<ffi.Size>,
                    ffi.Int,
                    ffi.Pointer<ffi.Size>)>>
        create_filter,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Uint8 Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>,
                    ffi.Size, ffi.Pointer<ffi.Char>, ffi.Size)>>
        key_may_match,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Void>)>>
        name,
  ) {
    return _leveldb_filterpolicy_create(
      state,
      destructor,
      create_filter,
      key_may_match,
      name,
    );
  }

  late final _leveldb_filterpolicy_createPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<leveldb_filterpolicy_t> Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<
                  ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Pointer<ffi.Char> Function(
                          ffi.Pointer<ffi.Void>,
                          ffi.Pointer<ffi.Pointer<ffi.Char>>,
                          ffi.Pointer<ffi.Size>,
                          ffi.Int,
                          ffi.Pointer<ffi.Size>)>>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Uint8 Function(
                          ffi.Pointer<ffi.Void>,
                          ffi.Pointer<ffi.Char>,
                          ffi.Size,
                          ffi.Pointer<ffi.Char>,
                          ffi.Size)>>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Pointer<ffi.Char> Function(
                          ffi.Pointer<
                              ffi.Void>)>>)>>('leveldb_filterpolicy_create');
  late final _leveldb_filterpolicy_create =
      _leveldb_filterpolicy_createPtr.asFunction<
          ffi.Pointer<leveldb_filterpolicy_t> Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<
                  ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Pointer<ffi.Char> Function(
                          ffi.Pointer<ffi.Void>,
                          ffi.Pointer<ffi.Pointer<ffi.Char>>,
                          ffi.Pointer<ffi.Size>,
                          ffi.Int,
                          ffi.Pointer<ffi.Size>)>>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Uint8 Function(
                          ffi.Pointer<ffi.Void>,
                          ffi.Pointer<ffi.Char>,
                          ffi.Size,
                          ffi.Pointer<ffi.Char>,
                          ffi.Size)>>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Pointer<ffi.Char> Function(
                          ffi.Pointer<ffi.Void>)>>)>();

  void leveldb_filterpolicy_destroy(
    ffi.Pointer<leveldb_filterpolicy_t> arg0,
  ) {
    return _leveldb_filterpolicy_destroy(
      arg0,
    );
  }

  late final _leveldb_filterpolicy_destroyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<leveldb_filterpolicy_t>)>>(
      'leveldb_filterpolicy_destroy');
  late final _leveldb_filterpolicy_destroy = _leveldb_filterpolicy_destroyPtr
      .asFunction<void Function(ffi.Pointer<leveldb_filterpolicy_t>)>();

  ffi.Pointer<leveldb_filterpolicy_t> leveldb_filterpolicy_create_bloom(
    int bits_per_key,
  ) {
    return _leveldb_filterpolicy_create_bloom(
      bits_per_key,
    );
  }

  late final _leveldb_filterpolicy_create_bloomPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<leveldb_filterpolicy_t> Function(
              ffi.Int)>>('leveldb_filterpolicy_create_bloom');
  late final _leveldb_filterpolicy_create_bloom =
      _leveldb_filterpolicy_create_bloomPtr
          .asFunction<ffi.Pointer<leveldb_filterpolicy_t> Function(int)>();

  ffi.Pointer<leveldb_readoptions_t> leveldb_readoptions_create() {
    return _leveldb_readoptions_create();
  }

  late final _leveldb_readoptions_createPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<leveldb_readoptions_t> Function()>>(
      'leveldb_readoptions_create');
  late final _leveldb_readoptions_create = _leveldb_readoptions_createPtr
      .asFunction<ffi.Pointer<leveldb_readoptions_t> Function()>();

  void leveldb_readoptions_destroy(
    ffi.Pointer<leveldb_readoptions_t> arg0,
  ) {
    return _leveldb_readoptions_destroy(
      arg0,
    );
  }

  late final _leveldb_readoptions_destroyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<leveldb_readoptions_t>)>>(
      'leveldb_readoptions_destroy');
  late final _leveldb_readoptions_destroy = _leveldb_readoptions_destroyPtr
      .asFunction<void Function(ffi.Pointer<leveldb_readoptions_t>)>();

  void leveldb_readoptions_set_verify_checksums(
    ffi.Pointer<leveldb_readoptions_t> arg0,
    int arg1,
  ) {
    return _leveldb_readoptions_set_verify_checksums(
      arg0,
      arg1,
    );
  }

  late final _leveldb_readoptions_set_verify_checksumsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<leveldb_readoptions_t>,
              ffi.Uint8)>>('leveldb_readoptions_set_verify_checksums');
  late final _leveldb_readoptions_set_verify_checksums =
      _leveldb_readoptions_set_verify_checksumsPtr
          .asFunction<void Function(ffi.Pointer<leveldb_readoptions_t>, int)>();

  void leveldb_readoptions_set_fill_cache(
    ffi.Pointer<leveldb_readoptions_t> arg0,
    int arg1,
  ) {
    return _leveldb_readoptions_set_fill_cache(
      arg0,
      arg1,
    );
  }

  late final _leveldb_readoptions_set_fill_cachePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<leveldb_readoptions_t>,
              ffi.Uint8)>>('leveldb_readoptions_set_fill_cache');
  late final _leveldb_readoptions_set_fill_cache =
      _leveldb_readoptions_set_fill_cachePtr
          .asFunction<void Function(ffi.Pointer<leveldb_readoptions_t>, int)>();

  void leveldb_readoptions_set_snapshot(
    ffi.Pointer<leveldb_readoptions_t> arg0,
    ffi.Pointer<leveldb_snapshot_t> arg1,
  ) {
    return _leveldb_readoptions_set_snapshot(
      arg0,
      arg1,
    );
  }

  late final _leveldb_readoptions_set_snapshotPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<leveldb_readoptions_t>,
                  ffi.Pointer<leveldb_snapshot_t>)>>(
      'leveldb_readoptions_set_snapshot');
  late final _leveldb_readoptions_set_snapshot =
      _leveldb_readoptions_set_snapshotPtr.asFunction<
          void Function(ffi.Pointer<leveldb_readoptions_t>,
              ffi.Pointer<leveldb_snapshot_t>)>();

  ffi.Pointer<leveldb_writeoptions_t> leveldb_writeoptions_create() {
    return _leveldb_writeoptions_create();
  }

  late final _leveldb_writeoptions_createPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<leveldb_writeoptions_t> Function()>>(
      'leveldb_writeoptions_create');
  late final _leveldb_writeoptions_create = _leveldb_writeoptions_createPtr
      .asFunction<ffi.Pointer<leveldb_writeoptions_t> Function()>();

  void leveldb_writeoptions_destroy(
    ffi.Pointer<leveldb_writeoptions_t> arg0,
  ) {
    return _leveldb_writeoptions_destroy(
      arg0,
    );
  }

  late final _leveldb_writeoptions_destroyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<leveldb_writeoptions_t>)>>(
      'leveldb_writeoptions_destroy');
  late final _leveldb_writeoptions_destroy = _leveldb_writeoptions_destroyPtr
      .asFunction<void Function(ffi.Pointer<leveldb_writeoptions_t>)>();

  void leveldb_writeoptions_set_sync(
    ffi.Pointer<leveldb_writeoptions_t> arg0,
    int arg1,
  ) {
    return _leveldb_writeoptions_set_sync(
      arg0,
      arg1,
    );
  }

  late final _leveldb_writeoptions_set_syncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<leveldb_writeoptions_t>,
              ffi.Uint8)>>('leveldb_writeoptions_set_sync');
  late final _leveldb_writeoptions_set_sync = _leveldb_writeoptions_set_syncPtr
      .asFunction<void Function(ffi.Pointer<leveldb_writeoptions_t>, int)>();

  ffi.Pointer<leveldb_cache_t> leveldb_cache_create_lru(
    int capacity,
  ) {
    return _leveldb_cache_create_lru(
      capacity,
    );
  }

  late final _leveldb_cache_create_lruPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<leveldb_cache_t> Function(ffi.Size)>>(
      'leveldb_cache_create_lru');
  late final _leveldb_cache_create_lru = _leveldb_cache_create_lruPtr
      .asFunction<ffi.Pointer<leveldb_cache_t> Function(int)>();

  void leveldb_cache_destroy(
    ffi.Pointer<leveldb_cache_t> cache,
  ) {
    return _leveldb_cache_destroy(
      cache,
    );
  }

  late final _leveldb_cache_destroyPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<leveldb_cache_t>)>>(
      'leveldb_cache_destroy');
  late final _leveldb_cache_destroy = _leveldb_cache_destroyPtr
      .asFunction<void Function(ffi.Pointer<leveldb_cache_t>)>();

  ffi.Pointer<leveldb_env_t> leveldb_create_default_env() {
    return _leveldb_create_default_env();
  }

  late final _leveldb_create_default_envPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<leveldb_env_t> Function()>>(
          'leveldb_create_default_env');
  late final _leveldb_create_default_env = _leveldb_create_default_envPtr
      .asFunction<ffi.Pointer<leveldb_env_t> Function()>();

  void leveldb_env_destroy(
    ffi.Pointer<leveldb_env_t> arg0,
  ) {
    return _leveldb_env_destroy(
      arg0,
    );
  }

  late final _leveldb_env_destroyPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<leveldb_env_t>)>>(
      'leveldb_env_destroy');
  late final _leveldb_env_destroy = _leveldb_env_destroyPtr
      .asFunction<void Function(ffi.Pointer<leveldb_env_t>)>();

  ffi.Pointer<ffi.Char> leveldb_env_get_test_directory(
    ffi.Pointer<leveldb_env_t> arg0,
  ) {
    return _leveldb_env_get_test_directory(
      arg0,
    );
  }

  late final _leveldb_env_get_test_directoryPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<leveldb_env_t>)>>('leveldb_env_get_test_directory');
  late final _leveldb_env_get_test_directory =
      _leveldb_env_get_test_directoryPtr.asFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<leveldb_env_t>)>();

  void leveldb_free(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _leveldb_free(
      ptr,
    );
  }

  late final _leveldb_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'leveldb_free');
  late final _leveldb_free =
      _leveldb_freePtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  int leveldb_major_version() {
    return _leveldb_major_version();
  }

  late final _leveldb_major_versionPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('leveldb_major_version');
  late final _leveldb_major_version =
      _leveldb_major_versionPtr.asFunction<int Function()>();

  int leveldb_minor_version() {
    return _leveldb_minor_version();
  }

  late final _leveldb_minor_versionPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('leveldb_minor_version');
  late final _leveldb_minor_version =
      _leveldb_minor_versionPtr.asFunction<int Function()>();
}

typedef va_list = ffi.Pointer<ffi.Char>;
typedef ptrdiff_t = ffi.LongLong;
typedef Dartptrdiff_t = int;
typedef errno_t = ffi.Int;
typedef Darterrno_t = int;
typedef wint_t = ffi.UnsignedShort;
typedef Dartwint_t = int;
typedef wctype_t = ffi.UnsignedShort;
typedef Dartwctype_t = int;
typedef __time32_t = ffi.Long;
typedef Dart__time32_t = int;
typedef __time64_t = ffi.LongLong;
typedef Dart__time64_t = int;

final class __crt_locale_data_public extends ffi.Struct {
  external ffi.Pointer<ffi.UnsignedShort> _locale_pctype;

  @ffi.Int()
  external int _locale_mb_cur_max;

  @ffi.UnsignedInt()
  external int _locale_lc_codepage;
}

final class __crt_locale_data extends ffi.Opaque {}

final class __crt_multibyte_data extends ffi.Opaque {}

final class __crt_locale_pointers extends ffi.Struct {
  external ffi.Pointer<__crt_locale_data> locinfo;

  external ffi.Pointer<__crt_multibyte_data> mbcinfo;
}

typedef _locale_t = ffi.Pointer<__crt_locale_pointers>;

final class _Mbstatet extends ffi.Struct {
  @ffi.UnsignedLong()
  external int _Wchar;

  @ffi.UnsignedShort()
  external int _Byte;

  @ffi.UnsignedShort()
  external int _State;
}

typedef mbstate_t = _Mbstatet;
typedef time_t = __time64_t;
typedef rsize_t = ffi.Size;
typedef Dartrsize_t = int;
typedef int_least8_t = ffi.SignedChar;
typedef Dartint_least8_t = int;
typedef int_least16_t = ffi.Short;
typedef Dartint_least16_t = int;
typedef int_least32_t = ffi.Int;
typedef Dartint_least32_t = int;
typedef int_least64_t = ffi.LongLong;
typedef Dartint_least64_t = int;
typedef uint_least8_t = ffi.UnsignedChar;
typedef Dartuint_least8_t = int;
typedef uint_least16_t = ffi.UnsignedShort;
typedef Dartuint_least16_t = int;
typedef uint_least32_t = ffi.UnsignedInt;
typedef Dartuint_least32_t = int;
typedef uint_least64_t = ffi.UnsignedLongLong;
typedef Dartuint_least64_t = int;
typedef int_fast8_t = ffi.SignedChar;
typedef Dartint_fast8_t = int;
typedef int_fast16_t = ffi.Int;
typedef Dartint_fast16_t = int;
typedef int_fast32_t = ffi.Int;
typedef Dartint_fast32_t = int;
typedef int_fast64_t = ffi.LongLong;
typedef Dartint_fast64_t = int;
typedef uint_fast8_t = ffi.UnsignedChar;
typedef Dartuint_fast8_t = int;
typedef uint_fast16_t = ffi.UnsignedInt;
typedef Dartuint_fast16_t = int;
typedef uint_fast32_t = ffi.UnsignedInt;
typedef Dartuint_fast32_t = int;
typedef uint_fast64_t = ffi.UnsignedLongLong;
typedef Dartuint_fast64_t = int;
typedef intmax_t = ffi.LongLong;
typedef Dartintmax_t = int;
typedef uintmax_t = ffi.UnsignedLongLong;
typedef Dartuintmax_t = int;

final class leveldb_t extends ffi.Opaque {}

final class leveldb_cache_t extends ffi.Opaque {}

final class leveldb_comparator_t extends ffi.Opaque {}

final class leveldb_env_t extends ffi.Opaque {}

final class leveldb_filelock_t extends ffi.Opaque {}

final class leveldb_filterpolicy_t extends ffi.Opaque {}

final class leveldb_iterator_t extends ffi.Opaque {}

final class leveldb_logger_t extends ffi.Opaque {}

final class leveldb_options_t extends ffi.Opaque {}

final class leveldb_randomfile_t extends ffi.Opaque {}

final class leveldb_readoptions_t extends ffi.Opaque {}

final class leveldb_seqfile_t extends ffi.Opaque {}

final class leveldb_snapshot_t extends ffi.Opaque {}

final class leveldb_writablefile_t extends ffi.Opaque {}

final class leveldb_writebatch_t extends ffi.Opaque {}

final class leveldb_writeoptions_t extends ffi.Opaque {}

const int leveldb_no_compression = 0;

const int leveldb_snappy_compression = 1;

const int _VCRT_COMPILER_PREPROCESSOR = 1;

const int _SAL_VERSION = 20;

const int __SAL_H_VERSION = 180000000;

const int _USE_DECLSPECS_FOR_SAL = 0;

const int _USE_ATTRIBUTES_FOR_SAL = 0;

const int _CRT_PACKING = 8;

const int _VCRUNTIME_DISABLED_WARNINGS = 4514;

const int _HAS_EXCEPTIONS = 1;

const int _WCHAR_T_DEFINED = 1;

const int NULL = 0;

const int _HAS_CXX17 = 0;

const int _HAS_CXX20 = 0;

const int _HAS_CXX23 = 0;

const int _HAS_CXX26 = 0;

const int _HAS_NODISCARD = 1;

const int _ARM_WINAPI_PARTITION_DESKTOP_SDK_AVAILABLE = 1;

const int _CRT_BUILD_DESKTOP_APP = 1;

const int _UCRT_DISABLED_WARNINGS = 4324;

const int _ARGMAX = 100;

const int _TRUNCATE = -1;

const int _CRT_INT_MAX = 2147483647;

const int _CRT_SIZE_MAX = -1;

const String __FILEW__ = 'C';

const int _CRT_FUNCTIONS_REQUIRED = 1;

const int _CRT_HAS_CXX17 = 0;

const int _CRT_HAS_C11 = 0;

const int _CRT_INTERNAL_NONSTDC_NAMES = 1;

const int __STDC_SECURE_LIB__ = 200411;

const int __GOT_SECURE_LIB__ = 200411;

const int __STDC_WANT_SECURE_LIB__ = 1;

const int _SECURECRT_FILL_BUFFER_PATTERN = 254;

const int _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES = 0;

const int _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_COUNT = 0;

const int _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES = 1;

const int _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_MEMORY = 0;

const int _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES_MEMORY = 0;

const int INT8_MIN = -128;

const int INT16_MIN = -32768;

const int INT32_MIN = -2147483648;

const int INT64_MIN = -9223372036854775808;

const int INT8_MAX = 127;

const int INT16_MAX = 32767;

const int INT32_MAX = 2147483647;

const int INT64_MAX = 9223372036854775807;

const int UINT8_MAX = 255;

const int UINT16_MAX = 65535;

const int UINT32_MAX = 4294967295;

const int UINT64_MAX = -1;

const int INT_LEAST8_MIN = -128;

const int INT_LEAST16_MIN = -32768;

const int INT_LEAST32_MIN = -2147483648;

const int INT_LEAST64_MIN = -9223372036854775808;

const int INT_LEAST8_MAX = 127;

const int INT_LEAST16_MAX = 32767;

const int INT_LEAST32_MAX = 2147483647;

const int INT_LEAST64_MAX = 9223372036854775807;

const int UINT_LEAST8_MAX = 255;

const int UINT_LEAST16_MAX = 65535;

const int UINT_LEAST32_MAX = 4294967295;

const int UINT_LEAST64_MAX = -1;

const int INT_FAST8_MIN = -128;

const int INT_FAST16_MIN = -2147483648;

const int INT_FAST32_MIN = -2147483648;

const int INT_FAST64_MIN = -9223372036854775808;

const int INT_FAST8_MAX = 127;

const int INT_FAST16_MAX = 2147483647;

const int INT_FAST32_MAX = 2147483647;

const int INT_FAST64_MAX = 9223372036854775807;

const int UINT_FAST8_MAX = 255;

const int UINT_FAST16_MAX = 4294967295;

const int UINT_FAST32_MAX = 4294967295;

const int UINT_FAST64_MAX = -1;

const int INTPTR_MIN = -9223372036854775808;

const int INTPTR_MAX = 9223372036854775807;

const int UINTPTR_MAX = -1;

const int INTMAX_MIN = -9223372036854775808;

const int INTMAX_MAX = 9223372036854775807;

const int UINTMAX_MAX = -1;

const int PTRDIFF_MIN = -9223372036854775808;

const int PTRDIFF_MAX = 9223372036854775807;

const int SIZE_MAX = -1;

const int SIG_ATOMIC_MIN = -2147483648;

const int SIG_ATOMIC_MAX = 2147483647;

const int WCHAR_MIN = 0;

const int WCHAR_MAX = 65535;

const int WINT_MIN = 0;

const int WINT_MAX = 65535;
